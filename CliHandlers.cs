using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Xml;
using LibGit2Sharp;
using ugh.Api;

namespace ugh
{
    public partial class Cli
    {
        private async Task SendHelp()
        {
            Display("<p>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ugh [–∫–æ–º–∞–Ω–¥—ã]</p>" +
                    "<br><p>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</p>" +

                    "<h1>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</h1>" +
                    "<li>user login\t\t–≤–æ–π—Ç–∏ –≤ —É—á. –∑–∞–ø–∏—Å—å</li>" +
                    "<li>user logout\t\t–≤—ã–π—Ç–∏ –∏–∑ —É—á. –∑–∞–ø–∏—Å–∏</li>" +
                    "<li>user [–ø–æ–ª—å–∑.]\t\t–ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</li>" +
                    "<li>user\t\t\t—Å–≤–µ–¥–µ–Ω–∏—è –æ —Ç–µ–∫—É—â–µ–π —É—á. –∑–∞–ø–∏—Å–∏</li>" +

                    "<h1>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π</h1>" +
                    "<li>repo\t\t\t–ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –æ —Ç–µ–∫. —Ä–µ–ø.</li>" +
                    "<li>repo owner/name\t–ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏</li>" +

                    "<h1>SSH-–∫–ª—é—á–∏</h1>" +
                    "<li>keys user\t\t–ø–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</li>" +
                    "<li>keys user N\t\t—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –Ω–æ–º–µ—Ä N</li>");

        }

        private Repository? getCurrentGitRepo(string pwd)
        {
            try
            {
                return new Repository(pwd);
            }
            catch
            {
                return null;
            }
        }

        private async Task SendRepo(params string[] args)
        {
            GitHubApiResponse.Repository? repo = null;
            DateTime? headDate = null;
            if (args.Length == 1)
            {
                var gitRepo = getCurrentGitRepo(_pwd);
                if (gitRepo != null)
                {
                    foreach (var origin in gitRepo.Network.Remotes)
                    {
                        if (origin.Url.Contains("github.com"))
                        {
                            var originPath = origin.Url.Split(':')[1];
                            var ownerAndRepo = originPath.Replace(".git", "").Split('/'); 
                            repo = await _ghc.Api.GetRepository(ownerAndRepo[0], ownerAndRepo[1]);
                            
                            headDate = gitRepo.Head.Tip.Committer.When.DateTime.ToUniversalTime();
                            break;
                        }
                    }
                    if (repo == null)
                    {
                      Display(@"<p>–≠—Ç–æ –Ω–µ GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.</p>"); 
                    }
                }
                else
                {
                    Display(@"<p>–ß—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—Ç—å ugh repo –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, 
                    –Ω–∞–¥–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º.</p>");
                    return;
                }
            } 
            else if (args.Length != 2)
            {
                Display(@"<e>–û—à–∏–±–∫–∞: –≤—ã —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏<e>");
                return;
            }
            else
            {
                repo = await _ghc.Api.GetRepository(args[0], args[1]);
            }
            
            Display($@"
            <h1>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {repo.FullName}</h1>
            <p>{repo.Description}</p>
            <p>‚≠ê {repo.Stars} üëÅ {repo.Watchers} ‚ùóÔ∏è {repo.Issues}</p>
            <p>{repo.HtmlUrl}</p>
            <br>
            <p>–°–∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å:</p>
            <ul>HTTP ‚Üí {repo.HttpUrl}</ul>
            <ul>SSH  ‚Üí {repo.SshUrl}</ul>
            ");

            if (headDate < repo.PushTime)
            {
                Display($@"<br><warn>–í–∞—à–∞ –∫–æ–ø–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞.</warn>
                <p>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ:</p>
                <li>{repo.PushTime:yyyy-MM-dd HH:mm:ss UTC}</li>
                <p>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞ –≤ –≤–∞—à–µ–π –∫–æ–ø–∏–∏:</p>
                <li>{headDate:yyyy-MM-dd HH:mm:ss UTC}</li>
                <br><i>–û–±–Ω–æ–≤–∏—Ç—å: git pull</i>");
            }
        }

        private async Task LogIn()
        {
            if (_ghc.Auth.IsAuthenticated())
            {
                Display(@"<e>–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–ø–µ—Ä–≤–∞ –≤—ã–π—Ç–∏!</e>
<i>–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π ugh user logout.</i>");
                return;
            }
            Display($@"<p>–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</p>
            <p>{_ghc.Auth.GetAuthLink()}</p>");
            try
            {
                await _ghc.Auth.LogIn();
                Display($"<h1>–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {_ghc.Auth.Session.User.Name}</h1>");
            }
            catch
            {
                Display("<e>–ù–µ —Å—É–¥—å–±–∞!</e>");
            }
        }

        private async Task LogOut()
        {
            if (!_ghc.Auth.IsAuthenticated())
            {
                Display(@"<e>–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–ø–µ—Ä–≤–∞ –≤–æ–π—Ç–∏!</e>
<p>–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π ugh user login.</p>");
                return;
            }
            _ghc.Auth.Session.Clear();
           Display("<p>–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏!</p>"); 
        }

        private string FormatUser(GitHubApiResponse.User user)
        {
            return $@"
            <h1>{user.Name} @{user.Login}</h1>
            {(user.Bio != "" ? ("<p>" + user.Bio + "</p>") : "[–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è]")}
            <p>üë• {user.Followers} üïµÔ∏è {user.Following} üóÇÔ∏è {user.Repos}</p>
            <u>https://github.com/${user.Login}</u>
            <p></p>
            ";
        }
        
        private async Task SendUser()
        {
            if (!_ghc.Auth.IsAuthenticated())
            {
                Display($@"<e>–û –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ.<e><i>–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π ugh user login</i>");
            }
            else
            {
                var user = _ghc.Api.GetCurrentUser();
                var result = FormatUser(await user);
                result += "<i>–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã ugh user logout</i>";
                Display(result);
            }
        }

        private async Task SendUser(string login)
        {
            var user = _ghc.Api.GetUser(login);
            var result = FormatUser(await user);
            Display(result);
        }

        private async Task SendKeys(string login)
        {
            var keys = await _ghc.Api.GetKeys(login);
            if (keys.Count == 0)
            {
                Display($"<p>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {login} –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö SSH-–∫–ª—é—á–µ–π.</p>");
            }
            for (var i=0; i<keys.Count; i++)
            {
                Display($"<h1>üîë {i+1}/{keys.Count}</h1>" +
                        $"<p>{keys[i].Value}</p><br>");
            }
        }

        private async Task SendKeys(string login, string countStr)
        {
            int count = -1;
            try
            {
                count = Int32.Parse(countStr);
            }
            catch
            {
                Display($"–ù–∞–¥–æ –Ω–æ–º–µ—Ä –∫–ª—é—á–∞, –∞ –Ω–µ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–¥–æ!");
                return;
            }
            GitHubApiResponse.Key? key = (await _ghc.Api.GetKeys(login)).ElementAtOrDefault(count-1);
            if (key != null)
            {
                await TextCopy.ClipboardService.SetTextAsync(key.Value);
                Display($"<h1>üîë –ö–ª—é—á {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {login} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.<br>");
            }
            else
            {
                Display($"–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞!<br>");
            }
        }
    }
}
