ЗАДАНИЕ НА РАЗРАБОТКУ ПРИЛОЖЕНИЯ "GitHub CLI"


1. Описание

1.1. Приложение реализует единый командный интерфейс к некоторым функциям git-хостинга GitHub:
- загрузка текущего git-репозитория на сайт;
- отображение открытых Issues для текущего репозитория;
- получение сведений о любом GitHub-проекте:
  - название,
  - автор,
  - лицензия,
  - число звёзд,
  - адрес для клонирования (HTTP и SSH);


2. Детали реализации

2.1. Авторизация пользователя должна быть реализована посредством протокола OAuth, поддерживаемого API сайта GitHub. Полученный в процессе токен для авторизации должен храниться в текстовом файле внутри изолированного контейнера System.IO.IsolatedStorage: это обеспечит кросс-платформенность приложения (на разных ОС - разные общепринятые "места" для хранения таких файлов) и безопасность токена (хранилище будет доступно только самому приложению).

2.2. При авторизации пользователя через OAuth приложению необходимо получить токен, это можно сделать двумя способами:
- Попросить пользователя вручную скопировать токен и вставить его в приложение;
- Сгенерировать ссылку для OAuth-авторизации такую, что при успехе она перенаправит пользователя на локальный веб-сервер, запущенный приложением, который сам перехватит токен (удобнее и изящнее, но надо проверить, позволяет ли GitHub перенаправлять авторизацию на локальный адрес).

2.3. Необходимо позаботиться о том, чтобы форматирование текста в терминале выглядело одинаково и на *nix, и на Windows. Это нетривиальная задача, поскольку формат т.н. escape sequences на этих платформах отличается. Необходимо аккуратно проверять тип ОС и установленную в системе кодировку.

2.4. Для взаимодействия с репозиториями необходима обработа метаданных git одним из способов:
- Вызов самой утилиты git и чтение её вывода;
- Подключение сторонней библиотеки (кажется, такие есть)
- Чтение вручную (на вид процесс тривиальный).

2.5. Специфика данных, с которыми должно работать приложение, подразумевает создание как минимум трёх классов: Repository, Issue, User.


3. Примерная спецификация интерфейса

3.1. Название исполняемого файла приложения должно быть кратким, например: ugh (udobny github).

3.2. Команды приложения должны передаваться как аргументы командной строки. Это общеспринятый стандарт взаимодействия, который, кроме всего прочего, позволяет использовать приложение в пользовательских скриптах (bash, powershell). Например:

     ugh upload - загрузить текущий репозиторий на GitHub

     ugh info - получить сведения о текущем репозитории
     ugh info vanyaklimenko/scoban - ... о конкретном репозитории

     ugh issues - показать все Issues для текущего репозитория
     ugh issues create "Test issue" - создать Issue

     ugh user - авторизоваться или получить сведения о тек. пользователе
     ugh user logout - удалить пользовательский токен



Последнее изменение: 2020-06-25 19:27
